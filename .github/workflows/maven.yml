name: Java CI with Maven

on:
  push:
    branches: [ "test-pipeline" ]
    tags: [ "*" ]  # Gatilho para todas as tags
  pull_request:
    branches: [ "test-pipeline" ]
  

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agrbackend-dev3
        options: >-
          --health-cmd="pg_isready -U postgres" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/agrbackend-dev3
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Configure JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            nc -z localhost 5432 && echo "PostgreSQL está pronto" && exit 0
            echo "Esperando PostgreSQL iniciar..."
            sleep 5
          done
          echo "PostgreSQL não iniciou a tempo"
          exit 1

      - name: Maven Build
        env: 
          JIRA_API_SECRET: ${{ secrets.JIRA_API_SECRET }}
          JIRA_API_USER: ${{ secrets.JIRA_API_USER }}
          SPRING_DATASOURCE_URL: ${{ env.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ env.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.SPRING_DATASOURCE_PASSWORD }}
        run: mvn -B package --file pom.xml

      - name: Upload Java Package
        uses: actions/upload-artifact@v3
        with:
          name: agrbackend-package
          path: target/*.jar

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GTOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Send Package to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GTOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/*.jar
          asset_name: agrbackend-dev.jar
          asset_content_type: application/java-archive
