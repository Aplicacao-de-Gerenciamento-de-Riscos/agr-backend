# Nome do workflow: Java CI with Maven
# Este workflow automatiza o processo de integração contínua (CI) e a criação de releases para um backend Java.
# Ele será acionado em pushs para a branch master, assim como em pushs de tags, e também em pull requests
# direcionadas para a branch master.
# A pipeline envolve:
# - Configuração do ambiente (Java 17, Maven)
# - Iniciação de um serviço PostgreSQL para testes de integração
# - Execução do build e testes via Maven
# - Criação de uma release e upload do pacote Java (JAR) se uma tag for empurrada

name: Java CI with Maven

on:
  # Dispara o workflow quando há push para a branch "master" e para qualquer tag.
  # Também é acionado em pull requests direcionadas à branch "master".
  push:
    branches: [ "master" ]
    tags: [ "*" ]  # Gatilho para qualquer tag
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    # O job "build" será executado em um runner Ubuntu.
    runs-on: ubuntu-latest

    # Configuração de serviços auxiliares.
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          # Variáveis de ambiente para configuração do PostgreSQL.
          # Define o usuário, senha e banco de dados padrão.
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agrbackend-dev3
        options: >-
          # Opções para verificação de saúde do container do PostgreSQL:
          # - health-cmd: Verifica se o banco está pronto.
          # - health-interval, health-timeout, health-retries: Ajustam intervalos e tempo de checagem.
          --health-cmd="pg_isready -U postgres" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    # Variáveis de ambiente para configurar o datasource do Spring Boot, apontando para o PostgreSQL.
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/agrbackend-dev3
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

    steps:
      # 1. Code Checkout:
      # Usa a ação oficial "checkout" para clonar o repositório no runner,
      # permitindo acesso ao código fonte para build e testes.
      - name: Code Checkout
        uses: actions/checkout@v4

      # 2. Configure JDK 17:
      # Usa a ação "setup-java" para configurar o Java 17 (Temurin) e habilita cache do Maven,
      # acelerando builds futuros.
      - name: Configure JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3. Esperar pelo PostgreSQL:
      # Executa um loop para verificar se o PostgreSQL está pronto para aceitar conexões,
      # tentando por até 10 vezes com intervalos de 5 segundos.
      # Caso não esteja pronto a tempo, falha a pipeline.
      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            nc -z localhost 5432 && echo "PostgreSQL está pronto" && exit 0
            echo "Esperando PostgreSQL iniciar..."
            sleep 5
          done
          echo "PostgreSQL não iniciou a tempo"
          exit 1

      # 4. Maven Build:
      # Executa o Maven para fazer o build e rodar testes do projeto Java.
      # Usa variáveis de ambiente do pipeline (JIRA_API_SECRET, JIRA_API_USER)
      # e também as do Spring Datasource, garantindo que os testes de integração
      # possam se conectar ao PostgreSQL.
      - name: Maven Build
        env:
          JIRA_API_SECRET: ${{ secrets.JIRA_API_SECRET }}
          JIRA_API_USER: ${{ secrets.JIRA_API_USER }}
          SPRING_DATASOURCE_URL: ${{ env.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ env.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.SPRING_DATASOURCE_PASSWORD }}
        run: mvn -B package --file pom.xml

      # 5. Upload Java Package:
      # Após o build, envia o pacote gerado (JAR) para a ação "upload-artifact",
      # permitindo o download do artefato resultante do build.
      - name: Upload Java Package
        uses: actions/upload-artifact@v3
        with:
          name: agrbackend-package
          path: target/*.jar

      # 6. Listar Arquivos no Diretório target:
      # Passo para depuração. Lista os arquivos no diretório "target/",
      # onde o Maven coloca o JAR final e artefatos de build.
      - name: Listar Arquivos no Diretório target
        run: ls -la target/

      # 7. Criar Release (se for uma tag):
      # Usa a ação "create-release" para criar uma nova release no GitHub
      # quando o push for de uma tag. A release terá o nome da tag.
      # É necessário um token GTOKEN com permissões adequadas.
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GTOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # 8. Enviar o Pacote para a Release:
      # Usa a ação "upload-release-asset" para anexar o JAR criado à release recém-criada,
      # tornando o binário acessível diretamente na página de releases.
      - name: Send Package to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GTOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/agr-backend-0.0.1-SNAPSHOT.jar
          asset_name: agrbackend-dev.jar
          asset_content_type: application/java-archive
