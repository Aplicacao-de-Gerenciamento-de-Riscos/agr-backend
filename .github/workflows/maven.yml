# Este workflow irá construir um projeto Java com Maven, adicionar o serviço PostgreSQL e executar os testes.
# Para mais informações, consulte: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ "test-pipeline" ]
  pull_request:
    branches: [ "test-pipeline" ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agrbackend-dev3
        options: >-
          --health-cmd="pg_isready -U postgres" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    # Definindo variáveis de ambiente para a conexão com o banco de dados
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/agrbackend-dev3
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Esperar PostgreSQL estar pronto
        run: |
          for i in {1..10}; do
            nc -z localhost 5432 && echo "PostgreSQL está pronto" && exit 0
            echo "Esperando PostgreSQL iniciar..."
            sleep 5
          done
          echo "PostgreSQL não iniciou a tempo"
          exit 1

      - name: Build com Maven
        env: 
          JIRA_API_SECRET: ${{ secrets.JIRA_API_SECRET }}
          JIRA_API_USER: ${{ secrets.JIRA_API_USER }}
          SPRING_DATASOURCE_URL: ${{ env.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ env.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.SPRING_DATASOURCE_PASSWORD }}
        run: mvn -B package --file pom.xml
